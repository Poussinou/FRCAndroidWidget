apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId "ca.rmen.android.frenchcalendar"
        minSdkVersion 3
        targetSdkVersion 21
        versionCode 161
        versionName "1.6.1"
        buildConfigField 'String', 'GIT_SHA1', '"' + gitSha1() + '"'
        buildConfigField 'String', 'BUILD_DATE', '"' + buildDate() + '"'
        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'

    }

    productFlavors {
        foss {
            buildConfigField 'boolean', 'FOSS', 'true'
        }
        wear {
            buildConfigField 'boolean', 'FOSS', 'false'
        }
    }

    if(project.hasProperty("keyStore")) {
        signingConfigs {
            release {
                storeFile file(project.keyStore)
                storePassword project.keyStorePassword
                keyAlias project.keyAlias
                keyPassword project.keyAliasPassword
            }
        }
        android.buildTypes.release.signingConfig =signingConfigs.release
    } else {
        android.buildTypes.release.signingConfig = null
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

android.applicationVariants.all { variant ->
    // Perform resource filtering
    variant.mergeResources.doLast {
        filterResources(project, variant)
    }
}

dependencies {
    compile 'ca.rmen:lib-french-revolutionary-calendar:1.1.1'
    compile 'com.robbypond:android-ColorPickerPreference:1.11.1'

    compile project(':common')

    // Package the wear apk inside this one (only for the 'wear' flavor)
    if(rootProject.findProject("wearable") != null) {
        wearCompile 'com.google.android.gms:play-services:6.1.71'
        wearWearApp project(':wearable')
    }
}

task deploy(dependsOn: assembleRelease) << {
    description 'Build a release apk, copy the result to the deploy and \'etc\' folders, then increment the build number.'

    def projectFlavorNames = project.("android").productFlavors.collect { it.name };
    for (flavorName in projectFlavorNames) {

        // Copy the apk to the 'etc' folder
        new File('../etc/apk').mkdirs()
        copy {
            from buildDir.getPath() + "/outputs/apk/${project.name}-${flavorName}-release.apk"
            into '../etc/apk'
            rename "${project.name}-${flavorName}-release.apk", "${globalProjectName}-${flavorName}-${android.defaultConfig.versionCode}-signed.apk"
        }

        // Copy the apk to the deploy folder
        if(project.hasProperty("deployFolder")) {
            copy {
                from buildDir.getPath() + "/outputs/apk/${project.name}-${flavorName}-release.apk"
                into project.deployFolder
                rename "${project.name}-${flavorName}-release.apk", "${globalProjectName}-${flavorName}-${android.defaultConfig.versionCode}-signed.apk"
            }
        }

        // Copy the proguard mapping to the 'etc' folder
        new File('../etc/proguard').mkdirs()
        copy {
            from buildDir.getPath() + "/outputs/mapping/${flavorName}/release/mapping.txt"
            into '../etc/proguard'
            rename 'mapping.txt', "mapping-${flavorName}-${android.defaultConfig.versionCode}.txt"
        }
    }
}
